// Code generated by protoc-gen-go. DO NOT EDIT.
// source: elector.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	elector.proto

It has these top-level messages:
	MsgPING
	MsgPONG
	MsgSeekVote
	MsgVote
	MsgAbdicate
	MsgPromoted
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumRole int32

const (
	EnumRole_CANDIDATE EnumRole = 0
	EnumRole_FOLLOWER  EnumRole = 1
	EnumRole_LEADER    EnumRole = 2
)

var EnumRole_name = map[int32]string{
	0: "CANDIDATE",
	1: "FOLLOWER",
	2: "LEADER",
}
var EnumRole_value = map[string]int32{
	"CANDIDATE": 0,
	"FOLLOWER":  1,
	"LEADER":    2,
}

func (x EnumRole) String() string {
	return proto.EnumName(EnumRole_name, int32(x))
}
func (EnumRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MsgPING struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role  EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	Count uint64   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *MsgPING) Reset()                    { *m = MsgPING{} }
func (m *MsgPING) String() string            { return proto.CompactTextString(m) }
func (*MsgPING) ProtoMessage()               {}
func (*MsgPING) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgPING) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPING) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgPING) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgPING) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MsgPONG struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role  EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	Count uint64   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *MsgPONG) Reset()                    { *m = MsgPONG{} }
func (m *MsgPONG) String() string            { return proto.CompactTextString(m) }
func (*MsgPONG) ProtoMessage()               {}
func (*MsgPONG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgPONG) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPONG) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgPONG) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgPONG) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MsgSeekVote struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role  EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	Bid   uint64   `protobuf:"varint,4,opt,name=bid" json:"bid,omitempty"`
}

func (m *MsgSeekVote) Reset()                    { *m = MsgSeekVote{} }
func (m *MsgSeekVote) String() string            { return proto.CompactTextString(m) }
func (*MsgSeekVote) ProtoMessage()               {}
func (*MsgSeekVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgSeekVote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgSeekVote) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgSeekVote) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgSeekVote) GetBid() uint64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type MsgVote struct {
	Id     uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role   EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch  uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	Agreed bool     `protobuf:"varint,4,opt,name=agreed" json:"agreed,omitempty"`
}

func (m *MsgVote) Reset()                    { *m = MsgVote{} }
func (m *MsgVote) String() string            { return proto.CompactTextString(m) }
func (*MsgVote) ProtoMessage()               {}
func (*MsgVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MsgVote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgVote) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgVote) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgVote) GetAgreed() bool {
	if m != nil {
		return m.Agreed
	}
	return false
}

type MsgAbdicate struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role  EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *MsgAbdicate) Reset()                    { *m = MsgAbdicate{} }
func (m *MsgAbdicate) String() string            { return proto.CompactTextString(m) }
func (*MsgAbdicate) ProtoMessage()               {}
func (*MsgAbdicate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MsgAbdicate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgAbdicate) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgAbdicate) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type MsgPromoted struct {
	Id       uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role     EnumRole `protobuf:"varint,2,opt,name=role,enum=protobuf.EnumRole" json:"role,omitempty"`
	Epoch    uint64   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
	Promoted bool     `protobuf:"varint,4,opt,name=promoted" json:"promoted,omitempty"`
}

func (m *MsgPromoted) Reset()                    { *m = MsgPromoted{} }
func (m *MsgPromoted) String() string            { return proto.CompactTextString(m) }
func (*MsgPromoted) ProtoMessage()               {}
func (*MsgPromoted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MsgPromoted) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPromoted) GetRole() EnumRole {
	if m != nil {
		return m.Role
	}
	return EnumRole_CANDIDATE
}

func (m *MsgPromoted) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgPromoted) GetPromoted() bool {
	if m != nil {
		return m.Promoted
	}
	return false
}

func init() {
	proto.RegisterType((*MsgPING)(nil), "protobuf.MsgPING")
	proto.RegisterType((*MsgPONG)(nil), "protobuf.MsgPONG")
	proto.RegisterType((*MsgSeekVote)(nil), "protobuf.MsgSeekVote")
	proto.RegisterType((*MsgVote)(nil), "protobuf.MsgVote")
	proto.RegisterType((*MsgAbdicate)(nil), "protobuf.MsgAbdicate")
	proto.RegisterType((*MsgPromoted)(nil), "protobuf.MsgPromoted")
	proto.RegisterEnum("protobuf.EnumRole", EnumRole_name, EnumRole_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Elector service

type ElectorClient interface {
	PING(ctx context.Context, in *MsgPING, opts ...grpc.CallOption) (*MsgPONG, error)
	SeekVote(ctx context.Context, in *MsgSeekVote, opts ...grpc.CallOption) (*MsgVote, error)
	Abdicate(ctx context.Context, in *MsgAbdicate, opts ...grpc.CallOption) (*MsgPromoted, error)
}

type electorClient struct {
	cc *grpc.ClientConn
}

func NewElectorClient(cc *grpc.ClientConn) ElectorClient {
	return &electorClient{cc}
}

func (c *electorClient) PING(ctx context.Context, in *MsgPING, opts ...grpc.CallOption) (*MsgPONG, error) {
	out := new(MsgPONG)
	err := grpc.Invoke(ctx, "/protobuf.Elector/PING", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electorClient) SeekVote(ctx context.Context, in *MsgSeekVote, opts ...grpc.CallOption) (*MsgVote, error) {
	out := new(MsgVote)
	err := grpc.Invoke(ctx, "/protobuf.Elector/SeekVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electorClient) Abdicate(ctx context.Context, in *MsgAbdicate, opts ...grpc.CallOption) (*MsgPromoted, error) {
	out := new(MsgPromoted)
	err := grpc.Invoke(ctx, "/protobuf.Elector/Abdicate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Elector service

type ElectorServer interface {
	PING(context.Context, *MsgPING) (*MsgPONG, error)
	SeekVote(context.Context, *MsgSeekVote) (*MsgVote, error)
	Abdicate(context.Context, *MsgAbdicate) (*MsgPromoted, error)
}

func RegisterElectorServer(s *grpc.Server, srv ElectorServer) {
	s.RegisterService(&_Elector_serviceDesc, srv)
}

func _Elector_PING_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPING)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectorServer).PING(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Elector/PING",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectorServer).PING(ctx, req.(*MsgPING))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elector_SeekVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSeekVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectorServer).SeekVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Elector/SeekVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectorServer).SeekVote(ctx, req.(*MsgSeekVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elector_Abdicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAbdicate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectorServer).Abdicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Elector/Abdicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectorServer).Abdicate(ctx, req.(*MsgAbdicate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Elector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Elector",
	HandlerType: (*ElectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PING",
			Handler:    _Elector_PING_Handler,
		},
		{
			MethodName: "SeekVote",
			Handler:    _Elector_SeekVote_Handler,
		},
		{
			MethodName: "Abdicate",
			Handler:    _Elector_Abdicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elector.proto",
}

func init() { proto.RegisterFile("elector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xc1, 0x4f, 0x83, 0x30,
	0x18, 0xc5, 0x81, 0xe1, 0x56, 0x3f, 0xdd, 0x82, 0x8d, 0x1a, 0xb2, 0xd3, 0xd2, 0x83, 0x59, 0x3c,
	0x70, 0xd8, 0x12, 0x0f, 0xde, 0x88, 0xab, 0xcb, 0x92, 0x6d, 0x2c, 0xd5, 0xe8, 0xc1, 0xd3, 0x80,
	0x3a, 0x89, 0x63, 0x5d, 0x18, 0xc4, 0xbf, 0xca, 0xff, 0xd1, 0x50, 0x28, 0x86, 0x9d, 0xd1, 0x13,
	0x7c, 0x3f, 0x78, 0xdf, 0xeb, 0x6b, 0x1e, 0x74, 0xf9, 0x96, 0x07, 0xa9, 0x48, 0x9c, 0x7d, 0x22,
	0x52, 0x81, 0x91, 0x7c, 0xf8, 0xd9, 0x3b, 0x89, 0xa1, 0xb3, 0x38, 0x6c, 0x56, 0xb3, 0xe5, 0x14,
	0xf7, 0xc0, 0x88, 0x42, 0x5b, 0x1f, 0xe8, 0x43, 0x93, 0x19, 0x51, 0x88, 0x6f, 0xc0, 0x4c, 0xc4,
	0x96, 0xdb, 0xc6, 0x40, 0x1f, 0xf6, 0x46, 0xd8, 0x51, 0x1a, 0x87, 0xee, 0xb2, 0x98, 0x89, 0x2d,
	0x67, 0xf2, 0x3b, 0xbe, 0x84, 0x13, 0xbe, 0x17, 0xc1, 0x87, 0xdd, 0x92, 0xd2, 0x62, 0xc8, 0x69,
	0x20, 0xb2, 0x5d, 0x6a, 0x9b, 0x05, 0x95, 0x83, 0xb2, 0xf3, 0xfe, 0xcd, 0xee, 0x6c, 0x71, 0xd8,
	0x3c, 0x71, 0xfe, 0xf9, 0x22, 0x52, 0xde, 0xb0, 0xa5, 0x05, 0x2d, 0x3f, 0x0a, 0x4b, 0xc3, 0xfc,
	0x95, 0x08, 0x99, 0xee, 0x0f, 0xac, 0xae, 0xa1, 0xbd, 0xde, 0x24, 0x9c, 0x17, 0x6e, 0x88, 0x95,
	0x13, 0x79, 0x93, 0xf9, 0x5c, 0x3f, 0x8c, 0x82, 0x75, 0xd3, 0xa6, 0xe4, 0x4b, 0x2e, 0x5f, 0x25,
	0x22, 0x16, 0x29, 0x0f, 0x1b, 0x4e, 0xd4, 0x87, 0xbc, 0x83, 0x72, 0x73, 0x99, 0xa9, 0x9a, 0x6f,
	0xc7, 0x80, 0xd4, 0x0e, 0xdc, 0x85, 0xd3, 0x07, 0x77, 0x39, 0x99, 0x4d, 0xdc, 0x67, 0x6a, 0x69,
	0xf8, 0x1c, 0xd0, 0xa3, 0x37, 0x9f, 0x7b, 0xaf, 0x94, 0x59, 0x3a, 0x06, 0x68, 0xcf, 0xa9, 0x3b,
	0xa1, 0xcc, 0x32, 0x46, 0xdf, 0x3a, 0x74, 0x68, 0x51, 0x72, 0xec, 0x80, 0x29, 0x1b, 0x7d, 0xf1,
	0x7b, 0xa8, 0xb2, 0xe4, 0xfd, 0x23, 0xe4, 0x2d, 0xa7, 0x44, 0xc3, 0x77, 0x80, 0xaa, 0x8e, 0x5c,
	0xd5, 0x7e, 0x50, 0xf8, 0x48, 0x97, 0x23, 0xa2, 0xe1, 0x7b, 0x40, 0xd5, 0xdd, 0xd7, 0x75, 0x0a,
	0xf7, 0xeb, 0x58, 0x5d, 0x26, 0xd1, 0xfc, 0xb6, 0xe4, 0xe3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x3e, 0x43, 0x39, 0x9a, 0x03, 0x00, 0x00,
}
